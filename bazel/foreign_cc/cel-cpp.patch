From d88b2a2d81e62335708057b3a044abada46de2a3 Mon Sep 17 00:00:00 2001
From: Rohit Agrawal <rohit.agrawal@databricks.com>
Date: Tue, 6 May 2025 17:30:08 +0900
Subject: [PATCH] Patches

Signed-off-by: Rohit Agrawal <rohit.agrawal@databricks.com>
---
 common/internal/byte_string.cc | 14 ++++++--------
 common/value.h                 |  2 +-
 common/values/value_variant.h  | 11 +++--------
 runtime/type_registry.h        |  4 ++--
 4 files changed, 12 insertions(+), 19 deletions(-)

diff --git a/common/internal/byte_string.cc b/common/internal/byte_string.cc
index e01c797f8..56237a71f 100644
--- a/common/internal/byte_string.cc
+++ b/common/internal/byte_string.cc
@@ -104,16 +104,14 @@ ByteString ByteString::Concat(const ByteString& lhs, const ByteString& rhs,

 ByteString::ByteString(Allocator<> allocator, absl::string_view string) {
   ABSL_DCHECK_LE(string.size(), max_size());
-  auto* arena = allocator.arena();
-  if (string.size() <= kSmallByteStringCapacity) {
-    SetSmall(arena, string);
-  } else {
-    SetMedium(arena, string);
+
+  // Check for null data pointer in the string_view
+  if (string.data() == nullptr) {
+    // Handle null data - create an empty ByteString
+    SetSmallEmpty(allocator.arena());
+    return;
   }
-}

-ByteString::ByteString(Allocator<> allocator, const std::string& string) {
-  ABSL_DCHECK_LE(string.size(), max_size());
   auto* arena = allocator.arena();
   if (string.size() <= kSmallByteStringCapacity) {
     SetSmall(arena, string);
diff --git a/common/value.h b/common/value.h
index 06a03c13d..9f5d77980 100644
--- a/common/value.h
+++ b/common/value.h
@@ -2733,7 +2733,7 @@ absl::StatusOr<std::pair<Value, int>> StructValueMixin<Base>::Qualify(
     absl::Nonnull<const google::protobuf::DescriptorPool*> descriptor_pool,
     absl::Nonnull<google::protobuf::MessageFactory*> message_factory,
     absl::Nonnull<google::protobuf::Arena*> arena) const {
-  ABSL_DCHECK_GT(qualifiers.size(), 0);
+  ABSL_DCHECK_GT(static_cast<int>(qualifiers.size()), 0);
   ABSL_DCHECK(descriptor_pool != nullptr);
   ABSL_DCHECK(message_factory != nullptr);
   ABSL_DCHECK(arena != nullptr);
diff --git a/common/values/value_variant.h b/common/values/value_variant.h
index 61c19ce5f..bca851308 100644
--- a/common/values/value_variant.h
+++ b/common/values/value_variant.h
@@ -732,14 +732,9 @@ class alignas(kValueVariantAlign) CEL_COMMON_INTERNAL_VALUE_VARIANT_TRIVIAL_ABI
       const bool rhs_trivial =
           (rhs.flags_ & ValueFlags::kNonTrivial) == ValueFlags::kNone;
       if (lhs_trivial && rhs_trivial) {
-        alignas(ValueVariant) std::byte tmp[sizeof(ValueVariant)];
-        // NOLINTNEXTLINE(bugprone-undefined-memory-manipulation)
-        std::memcpy(tmp, std::addressof(lhs), sizeof(ValueVariant));
-        // NOLINTNEXTLINE(bugprone-undefined-memory-manipulation)
-        std::memcpy(std::addressof(lhs), std::addressof(rhs),
-                    sizeof(ValueVariant));
-        // NOLINTNEXTLINE(bugprone-undefined-memory-manipulation)
-        std::memcpy(std::addressof(rhs), tmp, sizeof(ValueVariant));
+        ValueVariant tmp = lhs;
+        lhs = rhs;
+        rhs = std::move(tmp);
       } else {
         SlowSwap(lhs, rhs, lhs_trivial, rhs_trivial);
       }
diff --git a/runtime/type_registry.h b/runtime/type_registry.h
index 2b247946c..3e5ad423b 100644
--- a/runtime/type_registry.h
+++ b/runtime/type_registry.h
@@ -77,8 +77,8 @@ class TypeRegistry {
   // Move-only
   TypeRegistry(const TypeRegistry& other) = delete;
   TypeRegistry& operator=(TypeRegistry& other) = delete;
-  TypeRegistry(TypeRegistry&& other) = default;
-  TypeRegistry& operator=(TypeRegistry&& other) = default;
+  TypeRegistry(TypeRegistry&& other) = delete;
+  TypeRegistry& operator=(TypeRegistry&& other) = delete;

   // Registers a type such that it can be accessed by name, i.e. `type(foo) ==
   // my_type`. Where `my_type` is the type being registered.