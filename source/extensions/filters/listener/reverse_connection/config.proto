syntax = "proto3";

package envoy.extensions.filters.listener.reverse_connection.v3;

import "google/protobuf/duration.proto";
import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.listener.reverse_connection.v3";
option java_outer_classname = "ReverseConnectionConfigProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/listener/reverse_connection/v3;reverse_connectionv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Reverse Connection Listener Filter]
// Reverse connection listener filter that processes reverse connection metadata
// and initiates upstream connections for caching.

// Configuration for the reverse connection listener filter
message ReverseConnection {
  // Metadata key to look for reverse connection configuration
  // Default: "envoy.reverse_conn"
  string metadata_key = 1 [(validate.rules).string = {min_len: 1}];

  // Enable the filter
  bool enabled = 2;

  // Connection pool configuration for reverse connections
  message ConnectionPoolConfig {
    // Initial connection timeout
    google.protobuf.Duration connect_timeout = 1 [(validate.rules).duration = {gte: {seconds: 1}}];

    // Keepalive interval
    google.protobuf.Duration keepalive_interval = 2
        [(validate.rules).duration = {gte: {seconds: 5}}];

    // Max retry attempts
    uint32 max_retries = 3 [(validate.rules).uint32 = {lte: 10}];
  }

  ConnectionPoolConfig connection_pool_config = 3;
}
