#include "contrib/databricks_sql_proxy/filters/helper/postgres_helper.h"

#include <cstdint>

#include "contrib/databricks_sql_proxy/filters/helper/postgres_constants.h"

namespace Envoy {
namespace Extensions {
namespace DatabricksSqlProxy {
namespace Helper {

// Helper function to create a Postgres ErrorResponse message.
// For error response message format see
// https://www.postgresql.org/docs/current/protocol-message-formats.html#PROTOCOL-MESSAGE-FORMATS-ERRORRESPONSE
// For error field code see https://www.postgresql.org/docs/current/protocol-error-fields.html
// error_code is a string of 5 characters. See
// https://www.postgresql.org/docs/current/errcodes-appendix.html detail_message is optional and if
// not empty, it will be included in the error response.
//
// The protocol message format for an error response is:
// 1 byte - 'E' to identify the message as an error response.
// 4 bytes - length of the message including these 4 bytes.
// Then a sequence of error fields, each one consisting of:
// 1 byte - error field type code.
// N bytes - string value of the error field.
// 1 byte null terminator.
//
Buffer::OwnedImpl createPostgresErrorResponse(int16_t error_code, absl::string_view sql_state,
                                              absl::string_view error_message,
                                              absl::string_view detail_message) {

  PostgresConstants::PostgresErrorCode error_code_enum =
      static_cast<PostgresConstants::PostgresErrorCode>(error_code);
  auto it = PostgresConstants::PostgresErrorCodeToString.find(error_code_enum);
  // Default to "ERROR" if the error code is not found.
  absl::string_view error_level =
      (it != PostgresConstants::PostgresErrorCodeToString.end()) ? it->second : "ERROR";

  // Message terminator is not included in the length.
  // We have 2 error_level.size() twice because we send it for 'S' code and for 'V' code.
  int32_t error_response_length = 1                             // 'E' field
                                  + sizeof(int32_t)             // length of the message
                                  + (2 + error_level.size())    // 'S' field
                                  + (2 + error_level.size())    // 'V' field
                                  + (2 + sql_state.size())      // 'C' field
                                  + (2 + error_message.size()); // 'M' field

  if (!detail_message.empty()) {
    // 2 = 1 byte for error field type, 1 byte for null terminator.
    error_response_length += (2 + detail_message.size()); // 'D' field
  }

  Buffer::OwnedImpl error_response{};
  // Begin error response message header
  // Must contain the error response type code 'E' and the length of the message.
  error_response.add("E", 1);
  error_response.writeBEInt<int32_t>(error_response_length);

  // Add all the error fields
  // 'S' field is for Severity code
  error_response.add("S", 1);
  error_response.add(error_level);
  error_response.writeBEInt<uint8_t>(0);

  // 'V' field is for Severity code
  // This is present only in messages generated by PostgreSQL versions 9.6 and later.
  error_response.add("V", 1);
  error_response.add(error_level);
  error_response.writeBEInt<uint8_t>(0);

  // 'C' field is for SQLSTATE code
  error_response.add("C", 1);
  error_response.add(sql_state);
  error_response.writeBEInt<uint8_t>(0);

  // 'M' field is for human-readable error message
  error_response.add("M", 1);
  error_response.add(error_message);
  error_response.writeBEInt<uint8_t>(0);

  // 'D' field is for detailed error message. This is optional.
  if (!detail_message.empty()) {
    error_response.add("D", 1);
    error_response.add(detail_message);
    error_response.writeBEInt<uint8_t>(0);
  }

  // Indicate end of message
  error_response.writeBEInt<uint8_t>(0);

  return error_response;
}

} // namespace Helper
} // namespace DatabricksSqlProxy
} // namespace Extensions
} // namespace Envoy
