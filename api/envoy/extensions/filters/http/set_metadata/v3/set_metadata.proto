syntax = "proto3";

package envoy.extensions.filters.http.set_metadata.v3;

import "envoy/config/core/v3/substitution_format_string.proto";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

import "envoy/annotations/deprecation.proto";
import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.set_metadata.v3";
option java_outer_classname = "SetMetadataProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/set_metadata/v3;set_metadatav3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Set-Metadata Filter]
//
// This filters adds or updates dynamic metadata with static data.
//
// [#extension: envoy.filters.http.set_metadata]

// [#next-free-field: 8]
message Metadata {
  enum ValueType {
    STRING = 0;

    NUMBER = 1;

    // The value is a serialized `protobuf.Value
    // <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
    PROTOBUF_VALUE = 2;
  }

  // ValueEncode defines the encoding algorithm.
  enum ValueEncode {
    // The value is not encoded.
    NONE = 0;

    // The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
    // Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
    // non-ASCII characters in the value.
    BASE64 = 1;
  }

  // The metadata namespace.
  string metadata_namespace = 1 [(validate.rules).string = {min_len: 1}];

  // Allow the filter to overwrite or merge with an existing value in the namespace.
  bool allow_overwrite = 2;

  oneof kind {
    // The value to place at the namespace. If ``allow_overwrite``, this will
    // overwrite or merge with any existing values in that namespace. See
    // :ref:`the filter documentation <config_http_filters_set_metadata>` for
    // more information on how this value is merged with potentially existing
    // ones if ``allow_overwrite`` is configured.
    //
    // Only one of ``value``, ``typed_value``, or ``format_string`` may be set.
    google.protobuf.Struct value = 3;

    // The value to place at the namespace. If ``allow_overwrite``, this will
    // overwrite any existing values in that namespace.
    //
    // Only one of ``value``, ``typed_value``, or ``format_string`` may be set.
    google.protobuf.Any typed_value = 4;

    // The value to place at the namespace. It uses the :ref:`format string
    // <config_access_log_format_strings>` to dynamically set the metadata value.
    //
    // It supports placeholder expansion such as ``%VIRTUAL_CLUSTER_NAME%``,
    // ``%REQ(header-name)%``, etc. The result will be set as a string value in
    // the metadata unless ``type`` is specified.
    //
    // Only one of ``value``, ``typed_value``, or ``format_string`` may be set.
    config.core.v3.SubstitutionFormatString format_string = 5;
  }

  // The value's type â€” defaults to string.
  // This is only used with ``format_string`` to convert the formatted string
  // to the specified type before storing in metadata.
  ValueType type = 6 [(validate.rules).enum = {defined_only: true}];

  // How is the value encoded, default is NONE (not encoded).
  // The value will be decoded accordingly before storing to metadata.
  // This is only used with ``format_string``.
  ValueEncode encode = 7;
}

message Config {
  // Controls when the metadata should be applied.
  enum ApplyOn {
    // Apply metadata only during request processing (decode path).
    // This is the default for backward compatibility.
    REQUEST = 0;

    // Apply metadata only during response processing (encode path).
    RESPONSE = 1;

    // Apply metadata during both request and response processing.
    BOTH = 2;
  }

  // The metadata namespace.
  // This field is deprecated; please use ``metadata`` as replacement.
  string metadata_namespace = 1
      [deprecated = true, (envoy.annotations.deprecated_at_minor_version) = "3.0"];

  // The untyped value to update the dynamic metadata namespace with. See
  // :ref:`the filter documentation <config_http_filters_set_metadata>` for
  // more information on how this value is merged with potentially existing
  // ones.
  // This field is deprecated; please use ``metadata`` as replacement.
  google.protobuf.Struct value = 2
      [deprecated = true, (envoy.annotations.deprecated_at_minor_version) = "3.0"];

  // Defines changes to be made to dynamic metadata.
  repeated Metadata metadata = 3;

  // Controls when the metadata should be applied. Defaults to REQUEST for backward compatibility.
  ApplyOn apply_on = 4;
}
