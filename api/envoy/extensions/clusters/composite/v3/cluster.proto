syntax = "proto3";

package envoy.extensions.clusters.composite.v3;

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.clusters.composite.v3";
option java_outer_classname = "ClusterProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/clusters/composite/v3;compositev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Composite cluster configuration]
// Configuration for the composite cluster. This cluster type provides flexible sub-cluster 
// selection strategies for various use cases including retry progression, cross-cluster failover, etc.
// In future, this could be extended for use-cases like stateful session affinity.
//
// The composite cluster enables Envoy to route requests and retries across multiple clusters
// in a configured order, allowing for sophisticated failover strategies. For example, a primary
// cluster can be used for initial requests, while retries are directed to secondary clusters.
// Each cluster can have its own TLS settings, filter chains, and connection pool configurations.
//
// See the :ref:`architecture overview <arch_overview_composite_cluster>` for more information.
//
// Example:
//
// .. code-block:: yaml
//
//     name: composite_cluster
//     connect_timeout: 0.25s
//     lb_policy: CLUSTER_PROVIDED
//     cluster_type:
//       name: envoy.clusters.composite
//       typed_config:
//         "@type": type.googleapis.com/envoy.extensions.clusters.composite.v3.ClusterConfig
//         clusters:
//         - name: primary_cluster
//         - name: secondary_cluster
//         selection_strategy: SEQUENTIAL
//         retry_overflow_option: USE_LAST_CLUSTER
//
// [#extension: envoy.clusters.composite]

// [#next-free-field: 4]
message ClusterConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.clusters.aggregate_retry.v3.ClusterConfig";

  // Individual cluster entries.
  message ClusterEntry {
    // Name of the cluster to use. The cluster must be defined elsewhere in the configuration.
    string name = 1 [(validate.rules).string = {min_len: 1}];
  }

  // Cluster selection strategy determines how clusters are chosen for requests and retries.
  enum SelectionStrategy {
    // Sequential selection: first cluster for initial request, second for first retry, etc.
    // This is the primary strategy for retry-based progression where requests fail over
    // to the next cluster in the list with each retry attempt.
    SEQUENTIAL = 0;
  }

  // Options for handling retry overflow when retry attempts exceed available clusters.
  enum RetryOverflowOption {
    // Fail when retry attempts exceed the number of configured clusters.
    //
    // This is the default behavior.
    FAIL = 0;

    // Continue using the last cluster in the list for further retry attempts.
    //
    // This allows for unlimited retries to the final cluster in the configuration.
    USE_LAST_CLUSTER = 1;

    // Round-robin through available clusters for overflow attempts.
    //
    // After exhausting all clusters once, retry attempts cycle back to the first cluster.
    ROUND_ROBIN = 2;
  }

  // List of clusters with their configurations. Must contain at least one cluster.
  // The order of clusters is important for the ``SEQUENTIAL`` selection strategy.
  repeated ClusterEntry clusters = 1 [(validate.rules).repeated = {min_items: 1}];

  // Strategy for selecting clusters during request processing.
  //
  // If not specified, defaults to ``SEQUENTIAL`` for backward compatibility and retry use cases.
  SelectionStrategy selection_strategy = 2;

  // Controls behavior when the number of retry attempts exceeds the number of configured clusters.
  //
  // If not specified, defaults to ``FAIL``.
  RetryOverflowOption retry_overflow_option = 3;
}
