syntax = "proto3";

package envoy.extensions.clusters.composite.v3;

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.clusters.composite.v3";
option java_outer_classname = "ClusterProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/clusters/composite/v3;compositev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Composite cluster configuration]

// Configuration for the composite cluster. This cluster type enables retry progression
// across multiple sub-clusters. Initial requests are routed to the first sub-cluster,
// first retry to the second sub-cluster, second retry to the third sub-cluster, and so on.
//
// [#extension: envoy.clusters.composite]
message ClusterConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.extensions.clusters.composite.v3.ClusterConfig";

  // Behavior when retry attempts exceed the number of configured clusters.
  enum OverflowOption {
    // Further retry attempts fail with no host available.
    FAIL = 0;

    // Continue using the last cluster in the list for further retry attempts.
    USE_LAST_CLUSTER = 1;

    // Round-robin through available clusters for overflow attempts.
    ROUND_ROBIN = 2;
  }

  // Load balancing clusters for retry progression. Clusters are prioritized based on the order they
  // appear in this list. The first cluster is used for the initial request, the second for the
  // first retry, and so on.
  repeated string clusters = 1 [(validate.rules).repeated = {min_items: 1}];

  // Controls behavior when the number of retry attempts exceeds the number of configured clusters.
  // If not specified, defaults to ``FAIL``.
  OverflowOption overflow_option = 2;
}
