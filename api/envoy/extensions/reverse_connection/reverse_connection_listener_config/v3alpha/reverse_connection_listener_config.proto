syntax = "proto3";

package envoy.extensions.reverse_connection.reverse_connection_listener_config.v3alpha;

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.reverse_connection.reverse_connection_listener_config.v3alpha";
option java_outer_classname = "ReverseConnectionListenerConfigProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/reverse_connection/reverse_connection_listener_config/v3alpha;reverse_connection_listener_configv3alpha";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Reverse Connection Listener Configuration]
// Configuration for reverse connection listeners that initiate reverse tunnels
// instead of binding to a port and listening.

// Configuration for remote cluster reverse connections
message RemoteClusterConnectionConfig {
  // Name of the target cluster
  string cluster_name = 1 [(validate.rules).string = {min_len: 1}];
  
  // Number of reverse connections to maintain for this cluster
  uint32 reverse_connection_count = 2 [(validate.rules).uint32 = {gte: 1}];
}

// Reverse connection listener configuration
message ReverseConnectionListenerConfig {
  // Source cluster identifier
  string src_cluster_id = 1 [(validate.rules).string = {min_len: 1}];
  
  // Source node identifier  
  string src_node_id = 2 [(validate.rules).string = {min_len: 1}];
  
  // Source tenant identifier
  string src_tenant_id = 3 [(validate.rules).string = {min_len: 1}];
  
  // Remote cluster to connection count mapping
  repeated RemoteClusterConnectionConfig remote_cluster_to_conn_count = 4 
    [(validate.rules).repeated = {min_items: 1}];
} 